JVM (Java Virtual Machine)

JVM is a virtual machine that runs Java bytecode
It includes a Just-In-Time (JIT) compiler that optimizes the execution of bytecode

--------------------------------------------------

JRE (Java Runtime Environment)

JRE is a set of software tools that provide the necessary environment for running Java applications
It does not include development tools like compilers or debuggers, making it suitable for users
who want to run Java applications, not develop them

--------------------------------------------------

JDK (Java Development Kit)

JDK is a full-featured software development kit used for developing Java applications
It includes the JRE, a compiler (javac), a debugger, and other tools necessary for Java development

--------------------------------------------------

JVM : Executes Java bytecode, making Java programs platform-independent
JRE : Contains the JVM and libraries to run Java programs, but not for development
JDK : Contains the JRE and tools needed for developing Java applications

--------------------------------------------------

Primitive data types
(inbuilt with java)

Non Primitive data types
(created by user)

--------------------------------------------------

Implicit type casting
(Automatically done by JVM)

Explicit type casting
(Forcefully done by user)

--------------------------------------------------

Operators are symbols that is used to perform operations

--------------------------------------------------

Literals are constant values assigned to a variables

--------------------------------------------------

If statement

if (condition) {
    code to be executed if condition is true
}

--------------------------------------------------

If Else statement

if (condition) {
    code to be executed if condition is true
} else {
    code to be executed if condition is false
}

--------------------------------------------------

If Else If ladder

if (condition1) {
    code to be executed if condition1 is true
} else if (condition2) {
    code to be executed if condition2 is true
} else {
    code to be executed if all conditions are false
}

--------------------------------------------------

Switch statement

switch (expression) {
    case value1:
        code to be executed if expression equals value1
        break;
    case value2:
        code to be executed if expression equals value2
        break;
    (you can have any number of case statements)
    default:
        code to be executed if expression doesn't match any case
}

--------------------------------------------------

For loop

for (initialization; condition; increment/decrement) {
    code to be executed
}

--------------------------------------------------

While loop

while (condition) {
    code to be executed
}

--------------------------------------------------

Do while loop

do {
    code to be executed
} while (condition);

--------------------------------------------------

For each loop

for (type element : array/collection) {
    code to be executed
}

--------------------------------------------------

break

loops terminate on specified condition
The break statement is used to exit from a loop immediately, skipping any remaining iterations and statements in the loop. It can also be used to exit from a switch statement.

--------------------------------------------------

continue

resume loop with next iteration
The continue statement is used to skip the current iteration of a loop and proceed to the next iteration. It does not terminate the loop; instead, it stops the current iteration and moves to the next iteration based on the loop's condition.

--------------------------------------------------

object oriented programming

oops is a concept in any programming language (c++, java, python)
Object-oriented programming is a programming paradigm that uses objects to design computer programs.

--------------------------------------------------

class

class is a logical entity
contains properties (data members)
contains behaviour (methods)

A Java class is the template or blueprint from which objects are created
It is a blueprint for an object
A class is created using the keyword `class`

--------------------------------------------------

object

object is a physical entity

an object is the instance or result of a class
an object is a variable of the type class
A class is a template or blueprint from which objects are created

an object is a basic unit of oops that represents an instance of a class
Each object has:
State (represented by fields or attributes or data members)
Behavior (represented by member methods or methods)
Identity (a unique reference in memory)

--------------------------------------------------

constructor

constructor is a special method
used to initialize the object
constructor is used to initialize the data of the object

when we create constructor it will be automatically call by JVM
constructor name must be same as class name
does not return any values not even void

--------------------------------------------------

constructor overloading

Constructor overloading in Java allows developers to define multiple constructors within a class, each with a unique set of parameters

number of arguments different
type of arguments different
order of arguments different

--------------------------------------------------

method overloading

Having multiple methods in same class with same name
return type of method will not get affected

number of arguments different
type of arguments different
order of arguments different

--------------------------------------------------

this keyword

this is pointing to current class object
represents the current class object
refer current invoking object

this can not be used in static context
only used in non-static context

this()

for calling current class constructor from inside different constructor of same class

--------------------------------------------------

inheritance

allowing all methods and variables from one class to be accessible by another class
mechanism in java by which one class is allowed to inherit the features of another class

--------------------------------------------------

class name

parent class  |  child class
super class  |  sub class
base class  |  derived class

--------------------------------------------------

method overriding

Method overriding in Java is a feature that allows a subclass to provide a specific implementation of a method (body) that is already defined in its superclass method (body).

must have the same name, return type, and parameter list as the method in the superclass
Static methods cannot be overridden
method declared as final in the superclass cannot be overridden
constructors cannot be overridden
private methods of a superclass are not inherited by subclasses and cannot be overridden

--------------------------------------------------

encapsulation

wrapping of properties and behaviour in a single unit called class
properties are data members or variables
behaviour are member methods or methods

--------------------------------------------------

abstraction

showing features
and hiding internal details or logic or implementation

abstraction contains Abstract class and Interface

Abstract class - 0 to 100 percentage abstraction
Interface - 100 percentage abstraction

abstract class can not be instantiated or
object are not created from the abstract class

--------------------------------------------------

concrete method or  complete method

public void method(){   // method
    System.out.println("hi");   // body
}

--------------------------------------------------

abstract method

public void method();   // method

--------------------------------------------------

polymorphism

poly + morphs
many + forms

polymorphism means many forms
ability of an object to behave differently

--------------------------------------------------

polymorphism types

compile time polymorphism - static binding
object is bound with their functionality or methods at the compile time

run time polymorphism - dynamic binding
object is bound with their functionality or methods at the run time

compile time achieve through overloading
run time achieve through overriding

--------------------------------------------------

packages

used to group related classes
packages are folder in a file directory
use packages to avoid name conflicts
and to write a better maintainable code

Packages are divided into two categories :
Built-in Packages (packages from the Java API)
User-defined Packages (create your own packages)

--------------------------------------------------

create package

1 create a java class file
2 create a package named `packages`
3 save java file to this folder
4 javac packages\TestFirst.java (compile when file is in working directory)
5 java packages.TestFirst (run from src directory)

--------------------------------------------------

import package

1 using fully qualified class name
packages.TestFirst obj = new packages.TestFirst();

example :
java.util.Scanner sc = new java.util.Scanner();

--------------------------------------------------

2 using importing single class
import packages.TestFirst;
TestFirst obj = new TestFirst();

example :
import java.util.Scanner;
Scanner sc = new Scanner();

--------------------------------------------------

2 using importing all class
import packages.*;

example :
import java.util.*;


